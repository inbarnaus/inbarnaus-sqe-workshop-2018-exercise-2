import assert from 'assert';
import {subCode} from '../src/js/code-analyzer';
const escodegen = require('escodegen');

describe('The javascript parser', () => {
    it('1. is parsing an empty function correctly', () => {assert.equal(escodegen.generate(subCode('1,3,9', 'function foo(x, y, z){\n' + '    let a = x + 1;\n' + '    let b = a + y;\n' + '    let c = 0;\n' + '    \n' + '    if(true){\n' + 'c = 2\n' + 'return c + x;\n' + '}\n' + '    \n' + '    return z;\n' + '}')), 'function foo(x, y, z) {\n' + '    if (true) {\n' + '        return 2 + 1;\n' + '    }\n' + '    return 9;\n' + '}');});
    it('2. is parsing an array correctly', () => {assert.equal(escodegen.generate(subCode('1', 'let x= [1,2,3];\n' + 'let y= x[0];\n' + 'function foo(p){\n' + '   y = [1,2,3];\n' + '   let z=x[2];\n' + '}', '')), 'let x = [\n' + '    1,\n' + '    2,\n' + '    3\n' + '];\n' + 'let y = x[0];\n' + 'function foo(p) {\n' + '    y = [\n' + '        1,\n' + '        2,\n' + '        3\n' + '    ];\n' + '}');});
    it('3. is parsing an array correctly', () => {assert.equal(escodegen.generate(subCode('3', 'let x = [\'inbar\', 2, true];\n' + 'function foo(y){\n' + '   let p = y;\n' + '}')), 'let x = [\n' + '    \'inbar\',\n' + '    2,\n' + '    true\n' + '];\n' + 'function foo(y) {\n' + '}');});
    it('4. is parsing a array input correctly', () => {assert.equal(escodegen.generate(subCode('[1,2,3],4,5', 'function foo(x, y, z){\n' + '    let a = x[0] + 1;\n' + '    let b = a + y;\n' + '    let c = 0;\n' + '    \n' + '    if (b < z) {\n' + '        c = c + 5;\n' + '        return x[1] + y + z + c;\n' + '    } else if (b < z * 2) {\n' + '        c = c + x[0] + 5;\n' + '        return x[1] + y + z + c;\n' + '    } else {\n' + '        x[1] = c + z + 5;\n' + '        return x[2] + y + z + c;\n' + '    }\n' + '}\n')), 'function foo(x, y, z) {\n' + '    if (1 + 1 + 4 < 5) {\n' + '        return 2 + 4 + 5 + (0 + 5);\n' + '    } else if (1 + 1 + 4 < 5 * 2) {\n' + '        return 2 + 4 + 5 + (0 + 5 + 1 + 5);\n' + '    } else {\n' + '        x[1] = 0 + 5 + 1 + 5 + 5 + 5\n' + '        return 3 + 4 + 5 + (0 + 5 + 1 + 5);\n' + '    }\n' + '}');});

    it('5. is parsing a var Decl correctly', () => {assert.equal(escodegen.generate(subCode('2','let a = 1, z = 2;\n' + 'a = 2; \n' + 'z = a + 2; \n' + 'a = a + 1;\n' + 'function f (p1) {\n' + '   let x = p1;\n' + '}')), 'let a = 1, z = 2;\n' + 'a = 2;\n' + 'z = 2 + 2;\n' + 'a = 2 + 1;\n' + 'function f(p1) {\n' + '}');});

    it('6. is parsing a var Decl correctly', () => {assert.equal(escodegen.generate(subCode('3', 'let a = 1, z = 2;\n' + 'a = 2;\n' + 'z = a + 2;\n' + 'a = a + 1;\n' + 'function f (p1) {\n' + '    let x = p1;\n' + '    return x;\n' + '}')), 'let a = 1, z = 2;\n' + 'a = 2;\n' + 'z = 2 + 2;\n' + 'a = 2 + 1;\n' + 'function f(p1) {\n' + '    return 3;\n' + '}');});
    it('7. is parsing a var Decl correctly', () => {assert.equal(escodegen.generate(subCode('3', 'let a = 1, b = 2;\n' + 'a = 2;\n' + 'b = a + 2;\n' + 'function f (p1) {\n' + '    let x = p1;\n' + '    a = a + 1;\n' + '    let y = 2, z = 9;\n' + '    y = a + p1;\n' + '    x = 2 * a + p1;\n' + '    z = b + a;\n' + '    return x + y + z;\n' + '}')), 'let a = 1, b = 2;\n' + 'a = 2;\n' + 'b = 2 + 2;\n' + 'function f(p1) {\n' + '    a = 2 + 1;\n' + '    return 2 * (2 + 1) + 3 + (2 + 1 + 3) + (2 + 2 + (2 + 1));\n' + '}');});

    it('8. is parsing a var Decl correctly', () => {assert.equal(escodegen.generate(subCode('4', 'let a = 1, b = 2;\n' + 'a = 2;\n' + 'b = a + 2;\n' + 'function f (p1) {\n' + '    let x = 3;\n' + '    a = a + 1;\n' + '    let y = 2, z = 9;\n' + '    y = a + p1;\n' + '    x = 2 * a + p1;\n' + '    z = b + a;\n' + '    if((x > 3 | true) & (a < 9)){\n' + '        return 2;\n' + '    }\n' + '}')), 'let a = 1, b = 2;\n' + 'a = 2;\n' + 'b = 2 + 2;\n' + 'function f(p1) {\n' + '    a = 2 + 1;\n' + '    if ((2 * (2 + 1) + 4 > 3 | true) & 2 + 1 < 9) {\n' + '        return 2;\n' + '    }\n' + '}');});

    it('9. is parsing a var Decl correctly', () => {assert.equal(escodegen.generate(subCode('1,2,3', 'function foo(x, y, z){\n' + '     let a = x + 1;  \n' + '     let b = a + y;\n' + '     let c = 0;\n' + '     if (b < z) {\n' + '        c = c + 5;\n' + '        return x + y + z + c;\n' + '     } else if (b < z * 2) {\n' + '              c = c + x + 5;\n' + '              return x + y + z + c;\n' + '     } else {\n' + '           c = c + z + 5;\n' + '           return x + y + z + c;\n' + '     }\n' + '}')), 'function foo(x, y, z) {\n' + '    if (1 + 1 + 2 < 3) {\n' + '        return 1 + 2 + 3 + (0 + 5);\n' + '    } else if (1 + 1 + 2 < 3 * 2) {\n' + '        return 1 + 2 + 3 + (0 + 5 + 1 + 5);\n' + '    } else {\n' + '        return 1 + 2 + 3 + (0 + 5 + 1 + 5 + 3 + 5);\n' + '    }\n' + '}');});

    it('10. is parsing a var Decl correctly', () => {assert.equal(escodegen.generate(subCode('2,3,4', 'function foo(x, y, z){\n' + '     let a = x + 1;\n' + '     let b = a + y;\n' + '     let c = 0;\n' + '     while (c + 2 < 10) {\n' + '         a = x * y;\n' + '         z = a * b * c;\n' + '     }\n' + '     return z;\n' + '}')), 'function foo(x, y, z) {\n' + '    while (0 + 2 < 10) {\n' + '        z = 2 * 3 * (2 + 1 + 3) * 0;\n' + '    }\n' + '    return 2 * 3 * (2 + 1 + 3) * 0;\n' + '}');});

    it('11. is parsing an array correctly', () => {assert.equal(escodegen.generate(subCode('1', 'let x= [1,2,3];\n' + 'x[0] = 4;\n' + 'function foo(y){\n' + '   let z=y;\n' + '}')), 'let x = [\n' + '    1,\n' + '    2,\n' + '    3\n' + '];\n' + '(x[0] = 4)\n' + 'function foo(y) {\n' + '}');});

    it('12. is parsing an array correctly', () => {assert.equal(escodegen.generate(subCode('\'inbar\', 5', 'function foo(x,y){\n' + '    let z = x;\n' + '}')), 'function foo(x, y) {\n' + '}');});
});
